@startuml

!function $any_is_valid_( $any_target )
    !if $get_object_type_( $get_current_object_() ) == "func"
        ' 関数レベルで描画するモードであれば有効
        !return %true()
    !else
        ' 引数anyがtrue
        !if ( $any_target == %true() )
            !return %true()
        !else
            !return %false()
        !endif
    !endif
!endfunction

' コールを描画するならtrue
!function $call_display_is_valid_( $to="" )
    !if $get_object_type_( $get_current_object_() ) == "func"
        ' 関数レベルで描画するモードであれば有効
        !return %true()
    !else
        ' 引数anyがtrue
        !if ( $sdlConf_display_detail_unfocused_element_for_call == %true() )
            !return %true()
        !else
            !if ( $get_from_object_() == $get_to_object_( $to ) )
                !return %false()
            !else
                !return %true()
            !endif
        !endif
    !endif
!endfunction

' altを描画するならtrue
!function $alt_display_is_valid_()
    !return $any_is_valid_( $sdlConf_display_detail_unfocused_element_for_alt )
!endfunction

' loopを描画するならtrue
!function $loop_display_is_valid_()
    !return $any_is_valid_( $sdlConf_display_detail_unfocused_element_for_loop )
!endfunction

' stepを描画するならtrue
!function $step_display_is_valid_()
    !return $any_is_valid_( $sdlConf_display_detail_unfocused_element_for_step )
!endfunction

' 空のreturnを描画するならtrue
!function $void_return_display_is_valid_()
    !return $sdlConf_display_void_return
!endfunction

' 最初にreturnが現れた時点でライフラインをinactiveにする設定を有効にする場合true
!function $inactivate_in_first_return()
    !return $sdlConf_inactivate_in_first_return
!endfunction

' 同じライフライン上の場合returnをメッセージ(矢印)ではなく文字列で表示する場合はtrue
!function $on_same_lifeline_return_is_displayed_as_string()
    !return $sdlConf_on_same_lifeline_return_is_displayed_as_string
!endfunction

' 既にdeactivateされたライフライン(return2重コール等)で処理を実施するために、強制的にactivateする
!procedure $activate_when_already_inactivated()
    !if $call_display_is_valid_()
        !if ( ( $get_current_object_() != "" ) && ( $get_value_in_current_stack( "already_inactivated" ) ) )
            $set_value_in_current_stack( "already_inactivated", %false() )
        !endif
    !endif
!endprocedure

' callを描画
!procedure $generate_call_( $to, $message )
    $activate_when_already_inactivated()

    !if $call_display_is_valid_( $to )
        group "call $message"
    !endif
!endprocedure

' returnを描画
!procedure $generate_return_( $message = "" )
    !if $call_display_is_valid_( $get_value_in_prev_stack( "func" ) )
        :**return** $message;
        $set_value_in_current_stack( "return_called", %true() )
    !endif
!endprocedure

' 関数の終了を描画
!procedure $generate_function_end_()
    !if $call_display_is_valid_( $get_value_in_prev_stack( "func" ) )
       end group
    !endif
!endprocedure

' altを描画
!procedure $generate_alt_( $statement )
    $activate_when_already_inactivated()

    !if $alt_display_is_valid_()
        $statement
    !endif
!endprocedure

' loopを描画
!procedure $generate_loop_( $statement )
    $activate_when_already_inactivated()

    !if $loop_display_is_valid_()
        $statement
    !endif
!endprocedure

' stepを描画
!procedure $generate_step_( $string )
    $activate_when_already_inactivated()

    !if $step_display_is_valid_()
        :$string;
    !endif
!endprocedure


@enduml
