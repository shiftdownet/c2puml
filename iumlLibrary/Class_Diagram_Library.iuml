@startuml

'#=============================================================================
'# Skin setting
'#=============================================================================
' 下記設定を前提にplantumlを生成しています
'!pragma teoz true
'hide unlinked

'#=============================================================================
'# include modules
'#=============================================================================
!include ./stdlib/stdlib.iuml

' 描画対象のオブジェクトを選択するライブラリ
!include ./common/select_object.iuml

'#=============================================================================
'# Provided interfaces
'#=============================================================================
'#-------------------------------------------------
'# 実装コードを定義するAPI
'#-------------------------------------------------
' 関数をコールする
!procedure $call_by( $func )

    ' スタック：関数名
    $set_value_in_current_stack( "func",  $func )

    ' 実際の関数呼び出し
    !if %function_exists( "$" + $func )
        %invoke_procedure( "$" + $func )
    !endif

!endprocedure


!procedure $call( $func )

    ' 関数名の解決を行う
    !$fullname = $resolve_func_name( $func )

    ' 呼び出しを描画
    $generate_call_( $to=$fullname, $message=$func )

!endprocedure

!procedure $generate_call_( $to, $message )
    !$from_object = $get_from_object_()
    !$to_object = $get_to_object_( $to )
    !if $from_object != $to_object
        !$connection = $from_object + " -(0- " + $to_object
        !$message = "<font size=10>" + $message + "()\n"
        !if $array_has_specific_data("call_list", $connection) == %false()
            %set_variable_value( $connection, $message )
            $push_to( "call_list", $connection )
        !else
            %set_variable_value( $connection, %get_variable_value( $connection ) + $message )
        !endif
    !endif
!endprocedure

' returnする
!procedure $return($expression="")
!endprocedure

' stepを実行する
!procedure $step($content)
!endprocedure

' loopを開始する
!procedure $loop($information="infinity")
!endprocedure

' loopを終了する
!procedure $endloop()
!endprocedure

' forを開始する
!procedure $for($information="infinity")
!endprocedure

' forを終了する
!procedure $endfor()
!endprocedure

' whileを開始する
!procedure $while($information="infinity")
!endprocedure

' whileを終了する
!procedure $endwhile()
!endprocedure

' ifを開始する
!procedure $if($condition)
!endprocedure

' else-ifを開始する
!procedure $elseif($condition="")
!endprocedure

' elseを開始する
!procedure $else()
!endprocedure

' ifを終了する
!procedure $endif()
!endprocedure

' switchを開始する
!procedure $switch($expression)
!endprocedure

' caseラベルを定義する
!procedure $case($condition="")
!endprocedure

' defaultラベルを定義する
!procedure $default()
!endprocedure

' switchを終了する
!procedure $endswitch()
!endprocedure

'#-------------------------------------------------
'# ソフトウェアエレメントの階層構造を定義・描画するAPI
'#-------------------------------------------------
' コンポーネントの開始を宣言する
!procedure $start_component($component)
    %set_variable_value("current_component", $component )
!endprocedure

' モジュールの開始を宣言する
!procedure $start_module($module)
    !$module = $replace($module, ".", "_")
    %set_variable_value("current_module", $module )
    $set_component_of($module, %get_variable_value("current_component"))
!endprocedure

' 関数の開始を宣言する
!procedure $start_func($func, $scope="")
    !if $scope == "static"
        !$fullname = $get_func_name_with_module( $func, %get_variable_value("current_module") )
    !else
        !$fullname = $func
    !endif
    $set_module_of($fullname, %get_variable_value("current_module"))

    %set_variable_value($fullname + ".showname", $func )
!endprocedure

' 関数$funcのモジュール名$moduleを設定する
!procedure $set_module_of($func, $module)
    %set_variable_value($func + ".module", $module )

    ' module_listに存在しないmoduleであれば登録する
    !if %not($array_has_specific_data( "module_list", $module ))
        $push_to( "module_list", $module )
    !endif
    ' moduleに関数を登録する
    $push_to( "func_list_of_" + $module , $func )
!endprocedure

' モジュール$moduleのコンポーネント名$componentを設定する
!procedure $set_component_of($module, $component) 
    %set_variable_value($module + ".component", $component )

    ' component_listに存在しないcomponentであれば登録する
    !if %not($array_has_specific_data( "component_list", $component ))
        $push_to( "component_list", $component )
    !endif
    ' componentにmoduleを登録する
    $push_to( "module_list_of_" + $component , $module )
!endprocedure

' $set_xxx_of の設定に基づいて boxを描画する
!procedure $display_outline()
    $iterate_array( "component_list", "$callback_of_component_list" )
    $iterate_array( "call_list", "$callback_of_call_list" )

    '$iterate_array( "module_list", "$callback_of_module_list" )
!endprocedure

'#-------------------------------------------------
'# 描画方法を指定するAPI及びコンフィグ(ユーザplantumlコードから上書きしてください)
'#-------------------------------------------------
'# 描画の粒度を指定します。
'#      func ... 関数レベル
'#      module ... モジュールレベル
'#      component ... コンポーネントレベル
!$iumlLib_display_level = "module"

' 関数のステレオタイプ(1文字)を指定できます
!$iumlLib_stereotype_icon_of_func = "F"

' モジュールのステレオタイプ(1文字)を指定できます
!$iumlLib_stereotype_icon_of_module = "U"

' コンポーネントのステレオタイプ(1文字)を指定できます
!$iumlLib_stereotype_icon_of_component = "C"

' 関数のステレオタイプの色を指定できます
!$iumlLib_stereotype_color_of_func = "#ADD1B2"

' モジュールのステレオタイプの色を指定できます
!$iumlLib_stereotype_color_of_module = "#FFF200"

' コンポーネントのステレオタイプの色を指定できます
!$iumlLib_stereotype_color_of_component = "#B2ADD1"

'#=============================================================================
'# Internal functions
'#=============================================================================
!procedure $callback_of_component_list( $component_name )
    !if $iumlLib_display_level == "component"
        class $component_name <<($iumlLib_stereotype_icon_of_component,$iumlLib_stereotype_color_of_component)>> #WhiteSmoke {
    !else
        package "$component_name"  {
    !endif
    $iterate_array( "module_list_of_" + $component_name , "$callback_of_module_list_from_component" )
    }
!endprocedure

!procedure $callback_of_module_list_from_component( $module_name )
    '!$module_name = $replace($module_name, ".", "_")
    %set_variable_value("box_current_value", $module_name )
    !if $iumlLib_display_level == "module"
        class $module_name <<($iumlLib_stereotype_icon_of_module,$iumlLib_stereotype_color_of_module)>> #WhiteSmoke {
    !endif
    $iterate_array( "func_list_of_" + $module_name , "$callback_of_func_list_from_module" )
    !if $iumlLib_display_level == "module"
        }
    !endif
!endprocedure

!procedure $callback_of_func_list_from_module( $func_name )
    !$showname = %get_variable_value($func_name + ".showname" )
    !if $func_name == $showname
        + $showname()
    !else
        - $showname()
    !endif

    $call_by( $func_name )
!endprocedure

!procedure $callback_of_call_list( $call_graph )
    $call_graph : %get_variable_value( $call_graph )

!endprocedure

!function $get_func_name_with_module( $func, $module )
    !return $module + "_____" + $func
!endfunction

!function $resolve_func_name( $func )
    !$currentFullName = $get_value_in_current_stack( "func"  )
    !$currentModule   = %get_variable_value($currentFullName + ".module" )

    !$funcFullName = $get_func_name_with_module( $func, $currentModule )

    !if %function_exists( "$" + $funcFullName )
        !return $funcFullName
    !else
        !return $func
    !endif
!endfunction

@enduml
