@startuml

'#=============================================================================
'# Skin setting
'#=============================================================================
' 下記設定を前提にplantumlを生成しています
!pragma teoz true

'#=============================================================================
'# include modules
'#=============================================================================
' 配列構造を実現するライブラリ
!include ./array.iuml

' スタック構造を実現するライブラリ
!include ./stack.iuml

' 描画対象のオブジェクトを選択するライブラリ
!include ./select_object.iuml

' plantumlの構文に従ってテキストを生成するライブラリ
!include ./adl_plantuml.iuml

'#=============================================================================
'# Provided interfaces
'#=============================================================================
'#-------------------------------------------------
'# 実装コードを定義するAPI
'#-------------------------------------------------
' 関数をコールする
!procedure $call( $func )

    ' 関数名の解決を行う
    !$fullname = $resolve_func_name( $func )

    ' 呼び出しを描画
    $generate_call_( $to=$fullname, $message=$func )

    ' スタックを進める
    $inc_stack_()

    ' スタック：関数名
    $set_value_in_current_stack( "func", $fullname )
    ' スタック：このactivationの中でreturnが呼ばれたか
    $set_value_in_current_stack( "return_called", %false() )
    ' スタック：既にdeactivateされたか
    $set_value_in_current_stack( "already_inactivated", %false() )

    ' 実際の関数呼び出し
    !if %function_exists( "$" + $fullname )
        %invoke_procedure( "$" + $fullname )
    !endif

    ' 関数終了
    $generate_function_end_()

    ' スタックを戻す
    $dec_stack_()
!endprocedure

' returnする
!procedure $return($expression="")
    $generate_return_( $expression )
!endprocedure

' stepを実行する
!procedure $step($content)
    $generate_step_($content)
!endprocedure

' loopを開始する
!procedure $loop($information="infinity")
    $generate_loop_("while (" + $information + ")")
!endprocedure

' loopを終了する
!procedure $endloop()
    $generate_loop_("endwhile")
!endprocedure

' forを開始する
!procedure $for($information="infinity")
    $generate_loop_("while (" + $information + ")")
!endprocedure

' forを終了する
!procedure $endfor()
    $generate_loop_("endwhile")
!endprocedure

' whileを開始する
!procedure $while($information="infinity")
    $generate_loop_("while (" + $information + ")")
!endprocedure

' whileを終了する
!procedure $endwhile()
    $generate_loop_("endwhile")
!endprocedure

' ifを開始する
!procedure $if($condition)
    $generate_alt_("if (" + $condition + ") then")
!endprocedure

' else-ifを開始する
!procedure $elseif($condition="")
    $generate_alt_("elseif (" + $condition + ") then")
!endprocedure

' elseを開始する
!procedure $else()
    $generate_alt_("else (else)")
!endprocedure

' ifを終了する
!procedure $endif()
    $generate_alt_("endif")
!endprocedure

' switchを開始する
!procedure $switch($expression)
    $generate_alt_("switch (" + $expression + ")")
!endprocedure

' caseラベルを定義する
!procedure $case($condition="")
    $generate_alt_("case (" + $condition + ")")
!endprocedure

' defaultラベルを定義する
!procedure $default()
    $generate_alt_("case (default)")
!endprocedure

' switchを終了する
!procedure $endswitch()
    $generate_alt_("endswitch")
!endprocedure

'#-------------------------------------------------
'# ソフトウェアエレメントの階層構造を定義・描画するAPI
'#-------------------------------------------------
' コンポーネントの開始を宣言する
!procedure $start_component($component)
    %set_variable_value("current_component", $component )
!endprocedure

' モジュールの開始を宣言する
!procedure $start_module($module)
    !$module = $replace($module, ".", "_")
    %set_variable_value("current_module", $module )
    $set_component_of($module, %get_variable_value("current_component"))
!endprocedure

' 関数の開始を宣言する
!procedure $start_func($func, $scope="")
    !if $scope == "static"
        !$fullname = $get_func_name_with_module( $func, %get_variable_value("current_module") )
    !else
        !$fullname = $func
    !endif
    $set_module_of($fullname, %get_variable_value("current_module"))

    %set_variable_value($fullname + ".showname", $func )
!endprocedure

' 関数$funcのモジュール名$moduleを設定する
!procedure $set_module_of($func, $module)
    %set_variable_value($func + ".module", $module )

    ' module_listに存在しないmoduleであれば登録する
    !if %not($array_has_specific_data( "module_list", $module ))
        $push_to( "module_list", $module )
    !endif
    ' moduleに関数を登録する
    $push_to( "func_list_of_" + $module , $func )
!endprocedure

' モジュール$moduleのコンポーネント名$componentを設定する
!procedure $set_component_of($module, $component) 
    %set_variable_value($module + ".component", $component )

    ' component_listに存在しないcomponentであれば登録する
    !if %not($array_has_specific_data( "component_list", $component ))
        $push_to( "component_list", $component )
    !endif
    ' componentにmoduleを登録する
    $push_to( "module_list_of_" + $component , $module )
!endprocedure

' $set_xxx_of の設定に基づいて boxを描画する
!procedure $box()
    start
    $iterate_array( "component_list", "$callback_of_component_list" )
    '$iterate_array( "module_list", "$callback_of_module_list" )
!endprocedure

'#-------------------------------------------------
'# 描画方法を指定するAPI及びコンフィグ(ユーザplantumlコードから上書きしてください)
'#-------------------------------------------------
'# エントリポイント名を指定します
!$sdlConf_entry_point = "Driver"

'# 描画の粒度を指定します。
'#      func ... 関数レベル
'#      module ... モジュールレベル
'#      component ... コンポーネントレベル
!$sdlConf_display_level = "func"

'# $sdlConf_display_level が func以外に設定されている時でも、ここで指定したエレメントは個別のライフラインとして描画します
!$sdlConf_display_lifeline_focused_element = "not specified"

'# $sdlConf_display_lifeline_focused_element で componentが指定されているときに、描画するライフラインの粒度を指定します( func or module が指定可能です )
!$sdlConf_display_lifeline_focused_element_level = "not specified"

'# $sdlConf_display_level が func以外に設定されている時、sdlConf_display_lifeline_focused_elementでフォーカスされていないエレメントを詳細に描画するか選択できます。
'# 1. call
!$sdlConf_display_detail_unfocused_element_for_call = %false()
'# 2. alt
!$sdlConf_display_detail_unfocused_element_for_alt = %false()
'# 3. loop
!$sdlConf_display_detail_unfocused_element_for_loop = %false()
'# 3. step
!$sdlConf_display_detail_unfocused_element_for_step = %false()

' 空のreturnを描画するならtrueを設定してください
!$sdlConf_display_void_return = %true()

' 最初にreturnが現れた時点でライフラインをinactiveにする設定を有効にする場合trueを設定してください
!$sdlConf_inactivate_in_first_return = %true()

' 同じライフライン上の場合returnをメッセージ(矢印)ではなく文字列で表示する場合はtrueを設定してください
!$sdlConf_on_same_lifeline_return_is_displayed_as_string = %true()

' 関数のステレオタイプ(1文字)を指定できます
!$sdlConf_stereotype_icon_of_func = "F"

' モジュールのステレオタイプ(1文字)を指定できます
!$sdlConf_stereotype_icon_of_module = "U"

' コンポーネントのステレオタイプ(1文字)を指定できます
!$sdlConf_stereotype_icon_of_component = "C"

' 関数のステレオタイプの色を指定できます
!$sdlConf_stereotype_color_of_func = "#ADD1B2"

' モジュールのステレオタイプの色を指定できます
!$sdlConf_stereotype_color_of_module = "#FFF200"

' コンポーネントのステレオタイプの色を指定できます
!$sdlConf_stereotype_color_of_component = "#B2ADD1"

'#=============================================================================
'# Internal functions
'#=============================================================================
!procedure $callback_of_component_list( $component_name )
    $iterate_array( "module_list_of_" + $component_name , "$callback_of_module_list_from_component" )
!endprocedure

!procedure $callback_of_module_list_from_component( $module_name )
    '!$module_name = $replace($module_name, ".", "_")
    %set_variable_value("box_current_value", $module_name )
    $iterate_array( "func_list_of_" + $module_name , "$callback_of_func_list_from_module" )
!endprocedure

!procedure $callback_of_func_list_from_module( $func_name )
    !$showname = %get_variable_value($func_name + ".showname" )
!endprocedure

!function $get_func_name_with_module( $func, $module )
    !return $module + "_____" + $func
!endfunction


!function $resolve_func_name( $func )
    !$currentFullName = $get_value_in_current_stack( "func"  )
    !$currentModule   = %get_variable_value($currentFullName + ".module" )

    !$funcFullName = $get_func_name_with_module( $func, $currentModule )

    !if %function_exists( "$" + $funcFullName )
        !return $funcFullName
    !else
        !return $func
    !endif
!endfunction


!function $replace($old, $from, $to)
    !$list = %splitstr($old, $from)
    !$new = ""
    !$cnt = 0
    !foreach $item in $list
        !$cnt = $cnt + 1
        !if $cnt == %size($list)
            !$to = ""
        !endif
        !$new = $new + $item + $to
    !endfor
    !return $new
!endfunction

@enduml
